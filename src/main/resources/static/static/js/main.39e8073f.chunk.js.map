{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","vehicle","setVehicle","open","setOpen","price","setPrice","pickup","setPickup","delivery","setDelivery","show","setShow","error","setError","vehicle_dict","handleError","className","Backdrop","CircularProgress","color","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","width","maxWidth","noValidate","autoComplete","Box","display","flexDirection","justifyContent","TextField","id","label","value","onChange","event","target","FormControl","InputLabel","Select","Object","keys","map","key","MenuItem","Button","variant","onClick","requestOptions","method","headers","body","JSON","stringify","fetch","then","res","json","result","visibility","Snackbar","autoHideDuration","onClose","Alert","severity","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39e8073f.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport {\n    Backdrop,\n    Box,\n    Button,\n    CircularProgress,\n    FormControl,\n    Grid,\n    InputLabel,\n    MenuItem,\n    Select,\n    Snackbar\n} from \"@material-ui/core\";\n\nimport Alert from '@material-ui/lab/Alert';\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction App() {\n    const [vehicle, setVehicle] = React.useState(\"\");\n    const [open, setOpen] = React.useState(false);\n    const [price, setPrice] = React.useState(0);\n    const [pickup, setPickup] = React.useState(\"\");\n    const [delivery, setDelivery] = React.useState(\"\");\n    const [show, setShow] = React.useState(false);\n    const [error, setError] = React.useState(false);\n\n    const vehicle_dict = { \n        \"bicycle\": \"Bicycle\",\n        \"motorbike\": \"Motorbike\",\n        \"parcel_car\": \"Parcel car\",\n        \"small_van\": \"Small van\",\n        \"large_van\": \"Large van\",\n    };\n\n    const handleChange = (event) => {\n        setVehicle(event.target.value);\n        setShow(false);\n    };\n\n    const handlePickup = (event) => {\n        setPickup(event.target.value);\n        setShow(false);\n    };\n\n    const handleDelivery = (event) => {\n        setDelivery(event.target.value);\n        setShow(false);\n    };\n\n    const handleError = () => {\n        setError(false);\n    }\n\n    const handleSubmit = () => {\n        setOpen(true);\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                \"pickupPostcode\": pickup, \n                \"deliveryPostcode\": delivery,\n                \"vehicle\": vehicle })\n        };\n        fetch(\"http://localhost:8080/quote\", requestOptions)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setOpen(false);\n                    setShow(true);\n                    setPrice(result.price);\n                },\n                (error) => {\n                    setOpen(false)\n                    setError(true);\n                }\n            )\n    };\n\n    return (\n        <div className=\"App\">\n            <Backdrop className={\"backdrop\"} open={open}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n            <Grid\n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{ minHeight: '100vh' }}\n            >\n            <Grid item style={{ width: \"80%\" , maxWidth: \"300px\" }}>\n            <form noValidate autoComplete=\"off\">\n                <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\n                    <TextField\n                        id=\"filled-pickup\"\n                        label=\"Pickup Postcode\"\n                        className=\"text-field\"\n                        value={pickup}\n                        onChange={handlePickup}\n                    />\n                    <TextField\n                        id=\"filled-delivery\"\n                        label=\"Delivery Postcode\"\n                        className=\"text-field\"\n                        value={delivery}\n                        onChange={handleDelivery}\n                    />\n                    <FormControl>\n                        <InputLabel>\n                            Vehicle\n                        </InputLabel>\n                        <Select\n                            value={vehicle}\n                            onChange={handleChange}\n                        >\n                            {\n                                Object.keys(vehicle_dict).map((key) => (\n                                    <MenuItem key={key} value={key}>{vehicle_dict[key]}</MenuItem>\n                                ))\n                            }\n                        </Select>\n                    </FormControl>\n                    <Button style={{ \"margin\": \"10px 0\" }} className=\"button\" variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n                        Submit\n                    </Button>\n                    <Box visibility={ show ? \"visible\" : \"hidden\" }>\n                        A delivery from {pickup} to {delivery} using a {vehicle_dict[vehicle]} will cost you <b>Â£{price}</b>\n                    </Box>\n                </Box>\n            </form>\n            </Grid>\n            </Grid>\n            <Snackbar open={error} autoHideDuration={3000} onClose={handleError}>\n                <Alert severity=\"error\" onClose={handleError}>Cannot connect to the server!</Alert>\n            </Snackbar>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}